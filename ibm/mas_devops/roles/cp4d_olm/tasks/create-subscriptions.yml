---

# # 1. Create Namespaces & OperatorGroup
# # -----------------------------------------------------------------------------
# - name: "create-subscriptions : Create Namespaces for CP4D"
#   kubernetes.core.k8s:
#     apply: yes
#     template: 'templates/namespaces.yml.j2'

# - name: "create-subscriptions : Create OperatorGroup for CP4D"
#   kubernetes.core.k8s:
#     apply: yes
#     template: 'templates/operatorGroup.yml.j2'

- name: "install-cp4d : Apply the required role to the {{ cpd_operators_namespace }} project"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/rbac.yml.j2'

# Authorizing a user to act as an IBM Cloud Pak for Data instance administrator
# https://www.ibm.com/docs/en/cloud-paks/cp-data/4.8.x?topic=data-authorizing-instance-administrator
- include_tasks: "tasks/authorize-user-cpd-admin.yml"

# 2. Create Operator Subscriptions
# -----------------------------------------------------------------------------
# https://www.ibm.com/docs/en/cloud-paks/cp-data/4.5.x?topic=si-creating-olm-objects

# 2.1 Create olm-utils-cm config maps which contains the versions
# for all CPD related services and dependencies.
# This will be used by the CPD operators to automatically set the target versions
# to be installed/upgraded
# -----------------------------------------------------------------------------
- name: "install-cp4d : Create olm-utils-cm config map for cpd release {{ cpd_product_version }}"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/config_maps/olm-utils-cm-{{ cpd_product_version }}.yml.j2'

- name: "install-cp4d : Lookup olm-utils-cm config map to know which zen version to install/upgrade for release {{ cpd_product_version }}"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "olm-utils-cm"
    kind: ConfigMap
    namespace: "{{ cpd_instance_namespace }}"
  register: cpd_cm_info

- set_fact:
    cpd_components_meta: "{{ cpd_cm_info.resources[0].data.release_components_meta | from_yaml }}"

- name: "install-cp4d : Set CPD properties"
  set_fact:
    cpd_channel: "{{ cpd_components_meta.cpd_platform.sub_channel }}"
    zen_cr_version: "{{ cpd_components_meta.zen.cr_version }}"
    cpd_csv_version: "{{ cpd_components_meta.cpd_platform.csv_version }}"
    foundational_services_expected_csv_version: "{{ cpd_components_meta.cpfs.csv_version }}"
    ibm_licensing_channel: "{{ cpd_components_meta['ibm-licensing'].sub_channel }}"
    ibm_licensing_version: "{{ cpd_components_meta['ibm-licensing'].csv_version }}"
    cpfs_channel: "{{ cpd_components_meta.cpfs.sub_channel }}"
    cpfs_version: "{{ cpd_components_meta.cpfs.csv_version }}"

- debug:
    msg:
      - "CPD operators namespace ................... {{ cpd_operators_namespace }}"
      - "CPD instance namespace .................... {{ cpd_instance_namespace }}"
      - "CPD release version ....................... {{ cpd_product_version }}"
      - "CPD subscription channel .................. {{ cpd_channel }}"
      - "CPD csv version ........................... {{ cpd_csv_version }}"
      - "Zen/control plane version ................. {{ zen_cr_version }}"
      - "IBM Licensing channel ..................... {{ ibm_licensing_channel }}"
      - "IBM Licensing version ..................... {{ ibm_licensing_version }}"
      - "IBM Foundational Services channel ......... {{ cpfs_channel }}"
      - "IBM Foundational Services version ......... {{ cpfs_version }}"


# - name: "install-cp4d : Apply custom catalog sources for CPD, CPFS, Licensing and Postgres"
#   kubernetes.core.k8s:
#     apply: yes
#     template: 'templates/catalog-sources.yml.j2'


# Install NamespaceScope
# -----------------------------------------------------------------------------
- include_tasks: "tasks/install-ibm-namespace-scope.yml"

# Install Licensing
# -----------------------------------------------------------------------------
- include_tasks: "tasks/install-ibm-licensing.yml"

# # Install CPFS
# # -----------------------------------------------------------------------------
- include_tasks: "tasks/install-cpfs.yml"

# 2.2 Install the IBM Cloud Pak for Data platform operator

- name: "create-subscriptions : Create CP4D Platform subscription using channel: {{ cpd_channel }}"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/subscriptions.yml.j2'

- name: "create-subscriptions : Wait for cpd-platform-operator-manager to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: cpd-platform-operator-manager
    namespace: "{{ cpd_operators_namespace }}"
    kind: Deployment
  register: cpd_subscription
  until: cpd_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# This is just a validation step to prevent the "wait tasks" to run before it gives enough time for the new cpd service operator version
# to start reconciling in case of an upgrade, otherwise it might not have given enough time for it to process the new version to be upgrade
# while its status' cr might still show 'completed'.
# With this, we ensure the new cpd service csv version operator is up and running with the new cr version before we check the cpd cr status
- name: "Wait CP4D subscription installedCSV version at {{ expected_installed_csv }}"
  vars:
    expected_installed_csv: "cpd-platform-operator.v{{ cpd_csv_version }}"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ cpd_operators_namespace }}"
    name: "cpd-operator"
  register: cpd_sub_info
  retries: 20
  delay: 60 # Retry for approx 20 minutes (60s * 20 attempts) before giving up
  until:
    - cpd_sub_info.resources is defined
    - cpd_sub_info.resources | length > 0
    - cpd_sub_info.resources[0].status is defined
    - cpd_sub_info.resources[0].status.installedCSV is defined
    - cpd_sub_info.resources[0].status.installedCSV == expected_installed_csv

