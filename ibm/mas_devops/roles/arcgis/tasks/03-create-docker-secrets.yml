---
# ───────────────────────────────────────────────────────────────────────────────
# Creating Docker Secrets
# ───────────────────────────────────────────────────────────────────────────────
# secret/arcgis-container-registry created
# [SUCCESS]
# secret/arcgis-container-registry labeled
# [SUCCESS]

# create_registry_secret_creds()
# {
#   local registry="$1"
#   local name="$2"
#   local un="$CONTAINER_REGISTRY_USERNAME"
#   local pw="$CONTAINER_REGISTRY_PASSWORD"

#   if [ "$HELM_DEPLOY" = false ]; then
#     # Decrypt pw
#     if ! $(can_decrypt_aes256_string "$pw" "${ENCRYPTION_KEYFILE}") ; then
#       fail "Failed to decrypt registry password."
#     fi
#     pw=$(get_decrypted_aes256_string "$pw" "${ENCRYPTION_KEYFILE}")
#   fi

#   # Escape special shell chars
#   pw=$(printf "%q" "$pw")

#   run_command "kubectl create secret docker-registry ${name} \
#       --docker-server ${registry} \
#       --docker-username $un \
#       --docker-password $pw \
#       -n $K8S_NAMESPACE" "Create $name secret for registry $registry" "$pw"

#   run_command "kubectl label secret ${name} -n ${K8S_NAMESPACE} arcgis/siteName=${ARCGIS_SITENAME}" "Label secret $name"
# }

# The image pull secret is needed in the main CPD instance namespace as well as the ibm-common-services namespace
# The "create-postgres-license-config" job will fail if the secret does not exist in ibm-common-services
- name: "Create 'arcgis_container_image_pull_secret_name' secret in {{ arcgis }} namespace"
  vars:
    entitledAuthStr: "{{ arcgis_container_registry_username }}:{{ arcgis_container_registry_password }}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{ arcgis_registry_host }}": {"username":"{{ arcgis_container_registry_username }}","password":"{{ arcgis_container_registry_password }}","auth":"{{ entitledAuth }}"}'
      - '}'
      - '}'
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: "arcgis_container_image_pull_secret_name"
        namespace: "{{ arcgis_namespace }}"
        labels:
          arcgis/siteName: '{{ arcgis_sitename }}'
      stringData:
        .dockerconfigjson: "{{ content | join('') | string }}"
