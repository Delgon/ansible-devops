---
# Set variables for backup job
# -----------------------------------------------------------------------------
- name: "Set fact: backup job variables"
  set_fact:
    masbr_job_component:
      name: "mongodb"
      namespace: "{{ mongodb_namespace }}"
    masbr_job_data_list:
      - seq: "1"
        type: "database"

- name: "Set fact: mongodb variables"
  set_fact:
    mongodb_pod_name: mas-mongo-ce-0
    mongodb_container_name: mongod
    mongodb_backup_folder: /tmp/backup
    mongodb_lock_file: backup.lock

- name: "Set fact: exec command in mongodb pod"
  set_fact:
    mongodb_exec_in_pod: >-
      oc exec {{ mongodb_pod_name }} -c {{ mongodb_container_name }} -n {{ mongodb_namespace }} -- bash -c

- name: "Set fact: copy file variables"
  set_fact:
    masbr_cf_namespace: "{{ mongodb_namespace }}"
    masbr_cf_pod_name: "{{ mongodb_pod_name }}"
    masbr_cf_container_name: "{{ mongodb_container_name }}"
    masbr_cf_pvc_name: "data-volume-{{ mongodb_pod_name }}"
    masbr_cf_pvc_mount_path: "/data"


# Check backup variables
# -----------------------------------------------------------------------------
- name: "Check backup variables"
  include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/check_backup_vars.yml"


# Confirm cluster information
# -----------------------------------------------------------------------------
- name: "Confirm the currently connected cluster information"
  include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/confirm_cluster_info.yml"


# Create k8s Job to run backup tasks
# -----------------------------------------------------------------------------
- name: "Create k8s Job to run backup tasks"
  when: masbr_create_task_job
  include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/create_run_task_job.yml"
  vars:
    _rt_role_env:
      - name: "ROLE_NAME"
        value: "mongodb"
      - name: "MONGODB_PROVIDER"
        value: "{{ mongodb_provider }}"
      - name: "MONGODB_ACTION"
        value: "{{ mongodb_action }}"


- name: "Run backup tasks"
  when: not masbr_create_task_job
  block:
    # Update backup job status: New
    # -------------------------------------------------------------------------
    - name: "Update backup job status: New"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/update_job_status.yml"
      vars:
        _job_data_list:
          - seq: "1"
            phase: "New"


    # Check if mongodb is installed and running
    # -------------------------------------------------------------------------
    - name: "Get mongodb running information"
      include_tasks: "tasks/providers/{{ mongodb_provider }}/get-mongo-info.yml"

    - name: "Fail if mongodb does not exists"
      assert:
        that: mongodb_version is defined
        fail_msg: "Mongodb does not exists!"

    - name: "Fail if mongodb is not running"
      assert:
        that: mongodb_running is defined and mongodb_running
        fail_msg: "Mongodb is not running!"


    # Check if an exiting backup job is running
    # -------------------------------------------------------------------------
    - name: "Try to find backup lock file in pod"
      when: not masbr_backup_allow_multi_jobs
      changed_when: false
      shell: >
        {{ mongodb_exec_in_pod }}
        '[ -f {{ mongodb_backup_folder }}/{{ mongodb_lock_file }} ] && echo exist; exit 0'
      register: _get_lock_file_output

    - name: "Fail if found backup lock file in pod"
      when: not masbr_backup_allow_multi_jobs
      assert:
        that: _get_lock_file_output.stdout != "exist"
        fail_msg: "A mongodb backup job is running now, please try to run backup later!"

    - name: "Create backup lock file in pod"
      changed_when: true
      shell: >
        {{ mongodb_exec_in_pod }}
        'mkdir -p {{ mongodb_backup_folder }}/{{ masbr_job_name }};
        touch {{ mongodb_backup_folder }}/{{ mongodb_lock_file }}'
      register: _create_backup_lock_output


    # Check free disk space in pod
    # -------------------------------------------------------------------------
    - name: "Get free disk space in pod"
      changed_when: false
      shell: >
        {{ mongodb_exec_in_pod }}
        'df -h {{ mongodb_backup_folder }}'
      register: _df_output

    - name: "Debug: free disk space in pod"
      debug:
        msg: "{{ _df_output.stdout_lines }}"


    # Run backup tasks for each data type
    # -------------------------------------------------------------------------
    - name: "Run backup tasks for each data type"
      include_tasks: "tasks/providers/{{ mongodb_provider }}/backup-{{ job_data_item.type }}.yml"
      vars:
        masbr_job_data_seq: "{{ job_data_item.seq }}"
        masbr_job_data_type: "{{ job_data_item.type }}"
      loop: "{{ masbr_job_data_list }}"
      loop_control:
        loop_var: job_data_item

  rescue:
    # Update backup status: Failed
    # -------------------------------------------------------------------------
    - name: "Update database backup status: Failed"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/update_job_status.yml"
      vars:
        _job_status:
          phase: "Failed"

  always:
    # Clean up
    # -------------------------------------------------------------------------
    - name: "Delete backup files from mongodb pod"
      changed_when: true
      shell: >
        {{ mongodb_exec_in_pod }}
        'rm -f {{ mongodb_backup_folder }}/{{ mongodb_lock_file }};
        rm -rf {{ mongodb_backup_folder }}/{{ masbr_job_name }}'
      register: _delete_pod_files_output


    # After run tasks
    # -------------------------------------------------------------------------
    - name: "After run tasks"
      include_tasks: "{{ role_path }}/../../common_tasks/backup_restore/after_run_tasks.yml"
