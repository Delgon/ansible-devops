---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  assert:
    that: mas_instance_id is defined and mas_instance_id != ""
    fail_msg: "mas_instance_id property is required"

- name: "Fail if mas_uninstall_app is not provided"
  assert:
    that: mas_uninstall_app is defined and mas_uninstall_app != ""
    fail_msg: "mas_uninstall_app property is required"

- name: "Fail if mas_uninstall_app is not in defined list"
  assert:
    that: mas_uninstall_app is not in ["Assist", "DataDictionary", "HPUtilities", "Health", "IoT", "Manage", "Monitor", "Optimizer", "Predict", "VisualInspectionApp"]
    fail_msg: "mas_uninstall_app property is in the defined list"

- name: "Debug Uninstall Parameters"
  debug:
    msg:
      - "MAS Instance ID .................... {{ mas_instance_id }}"
      - "MAS Uninstall App .................. {{ mas_uninstall_app }}"

- name: "Get APP short name for normal apps"
  set_fact:
    mas_app_short_name: "{{ mas_uninstall_app | lower }}"

- name: "Get APP short name for DataDictionary"
  when: mas_uninstall_app == "DataDictionary"
  set_fact:
    mas_app_short_name: "add"

- name: "Get APP short name for VisualInspectionApp"
  when: mas_uninstall_app == "VisualInspectionApp"
  set_fact:
    mas_app_short_name: "visualinspection"

# mas_uninstall_app should be in one of follows: Assist, DataDictionary, HPUtilities, Health, IoT, Manage, Monitor, Optimizer, Predict, VisualInspectionApp
# Application name    | short name in namespce  | CR                  | APP CR              | workspace CR                  | Other CR
# ---------------------------------------------------------------------------------------------------------------------------------------
# Assist              | assist                  | N/A                 | AssistApp           | AssistWorkspace               | AssistBackup, AssistRestore       
# DataDictionary      | add                     | AssetDataDictionary | N/A                 | DataDictionaryWorkspace       |
# HPUtilities         | hputilities             | N/A                 | HPUtilitiesApp      | HPUtilitiesWorkspace          | 
# Health              | health                  | N/A                 | HealthApp           | HealthWorkspace               |
# IoT                 | iot                     | IoT                 | N/A                 | IoTWorkspace                  |
# Manage              | manage                  | N/A                 | ManageApp           | ManageWorkspace               | ManageBuild, ManageDeployment, ManagementIngress, ManageServerBundle, ManageStatusChecker
# Monitor             | monitor                 | Monitor             | MonitorApp          | MonitorWorkspace              |
# Optimizer           | optimizer               | N/A                 | OptimizerApp        | OptimizerWorkspace            | OptimizerStatusChecker
# Predict             | predict                 | N/A                 | PredictApp          | PredictWorkspace              |
# VisualInspectionApp | visualinspection        | N/A                 | VisualInspectionApp | VisualInspectionAppWorkspace  |


# 2. Delete the ApplicationApp CR
# -----------------------------------------------------------------------------
- name: "Delete {{mas_uninstall_app}}APP CR"
  kubernetes.core.k8s:
    state: absent
    api_version: core.mas.ibm.com/v1
    kind: "{{mas_uninstall_app}}App"
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    name: "{{ mas_instance_id }}"
  

# 2. Delete the Application  CR
# -----------------------------------------------------------------------------
- name: "Delete {{mas_uninstall_app}} CR"
  kubernetes.core.k8s:
    state: absent
    api_version: core.mas.ibm.com/v1
    kind: "{{mas_uninstall_app}}"
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    name: "{{ mas_instance_id }}"
  when: mas_uninstall_app is not in ["Assist", "DataDictionary", "HPUtilities", "Health", "IoT", "Manage", "Monitor", "Optimizer", "Predict", "VisualInspectionApp"]

# 3. Wait for all deployments to be terminated other than the two operators
# -----------------------------------------------------------------------------
# We should be left with only three deployments running in the namespace:
# - ibm-common-service-operator
# - ibm-mas-operator
# - ibm-truststore-mgr-controller-manager
#
# This should take approximately 5 minutes
- name: "Wait for all deployments to wind down"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
  register: deployments
  until:
    - deployments.resources is defined
    - deployments.resources | length <= 3
  retries: 30
  delay: 10


# 4. Verify that APP CR is gone
# -----------------------------------------------------------------------------
- name: "Look for the {{mas_uninstall_app}}App CR after deletion"
  kubernetes.core.k8s_info:
    api_version: core.mas.ibm.com/v1
    kind: "{{mas_uninstall_app}}App"
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    name: "{{ mas_instance_id }}"
  register: verify_app_app_delete

- name: "Verify the {{mas_uninstall_app}}App CR was deleted"
  assert:
    that:
      - verify_app_app_delete.resources is defined
      - verify_app_app_delete.resources | length == 0


- name: "Look for the {{mas_uninstall_app}} CR after deletion"
  kubernetes.core.k8s_info:
    api_version: core.mas.ibm.com/v1
    kind: "{{mas_uninstall_app}}"
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    name: "{{ mas_instance_id }}"
  register: verify_app_delete

- name: "Verify the {{mas_uninstall_app}} CR was deleted"
  assert:
    that:
      - verify_app_delete.resources is defined
      - verify_app_delete.resources | length == 0






# 5. Verify that Truststore CRs are all gone
# -----------------------------------------------------------------------------
- name: "Look for the Suite CR after deletion"
  kubernetes.core.k8s_info:
    api_version: truststore-mgr.ibm.com/v1
    kind: Truststore
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
  register: verify_truststores_delete

- name: "Verify the Suite Truststores were all deleted"
  assert:
    that:
      - verify_truststores_delete.resources is defined
      - verify_truststores_delete.resources | length == 0

# TO-DO !!!!!!
# 7. Delete Suite Subscription
# -----------------------------------------------------------------------------
# TODO: This would be more reliable if we used a label selector with:
#         operators.coreos.com/ibm-mas.mas-clitest-core: ""
- name: "Delete ibm-mas Subscription"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-mas.mas.mas-{{ mas_instance_id }}-core"

- name: "Delete ibm-truststore-mgr Subscription"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-truststore-mgr.mas-{{ mas_instance_id }}-core"

- name: "Delete ibm-common-service-operator Subscription"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-common-service-operator.mas-{{ mas_instance_id }}-core"

# TO-DO !!!!!!
# 8. Delete CSVs
# -----------------------------------------------------------------------------
- name: "Delete ibm-mas CSV"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-mas.mas-{{ mas_instance_id }}-core"

- name: "Delete ibm-truststore-mgr CSV"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-truststore-mgr.mas-{{ mas_instance_id }}-core"

- name: "Delete ibm-common-service-operator CSV"
  kubernetes.core.k8s:
    state: absent
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
    label_selectors:
      - "operators.coreos.com/ibm-common-service-operator.mas-{{ mas_instance_id }}-core"


# 9. Wait for all deployments to be terminated
# -----------------------------------------------------------------------------
- name: "Wait for operator deployments to wind down"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
  register: deployments
  until:
    - deployments.resources is defined
    - deployments.resources | length == 0
  retries: 30
  delay: 10


# 13. Delete APP Namespace
# -----------------------------------------------------------------------------
- name: "Delete core namespace"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Namespace
    name: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"


# 14. Verify APP Namespace is gone
# -----------------------------------------------------------------------------
- name: "Wait for namespace to be deleted"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "mas-{{ mas_instance_id }}-{{mas_app_short_name}}"
  register: namespace_check
  until:
    - namespace_check.resources is defined
    - namespace_check.resources | length == 0
  retries: 30
  delay: 10
