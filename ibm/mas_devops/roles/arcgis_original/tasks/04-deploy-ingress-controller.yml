---
# ───────────────────────────────────────────────────────────────────────────────
# Deploying Ingress Controller
# ───────────────────────────────────────────────────────────────────────────────
# Using OpenSSL 3.2.1 30 Jan 2024 (Library: OpenSSL 3.2.1 30 Jan 2024)

# .....+++++++++++++++++++++++++++++++++++++++*..........+...+............+...+..+...+.+++++++++++++++++++++++++++++++++++++++*...+.....+...+.+.....+...+.+......+......+.....+...+.+.....+......+.........+.+...+...............+..+............+...+....+......+........+....+..+.........+......+....+.........+........+.......+........+.......+......+..+....+..................+......+....................+.+....................+......+.......+..+......+.........+...+...............+.+..............+.......++++++
# -----
# secret/arcgis-interpod-cert-pem created
# secret/arcgis-interpod-cert-pem labeled
# secret/arcgis-interpod-cert-pem labeled
# secret/arcgis-interpod-cert-pfx created
# secret/arcgis-interpod-cert-pfx labeled
# secret/arcgis-interpod-cert-pfx labeled
# .+..+.......+..+++++++++++++++++++++++++++++++++++++++*....+......+........+.......+...+............+..+...+.........+...+.......+......+...+......+.....+...+......+++++++++++++++++++++++++++++++++++++++*........+...+.+..............+...............+...+...+....+...+........+.......+.........+......+........+....+.................+.+.........+...+..++++++

# -----
# secret/arcgis-ingress-cert-pem created
# secret/arcgis-ingress-cert-pem labeled
# configmap/arcgis-ingress-controller-nginx-config created
# configmap/arcgis-ingress-controller-tcp-services created
# configmap/arcgis-ingress-controller-udp-services created
# lease.coordination.k8s.io/arcgis-ingress-controller-leader created
# serviceaccount/arcgis-ingress-serviceaccount created
# role.rbac.authorization.k8s.io/arcgis-ingress-role created
# rolebinding.rbac.authorization.k8s.io/arcgis-ingress-rolebinding created
# deployment.apps/arcgis-ingress-controller created
# service/arcgis-ingress-nginx created
# [SUCCESS]


# cmd_install_ingress_controller()
# {
#   header "Deploying Ingress Controller"

#   local deploy_script="${CWD}/.install/ingress-controller/deploy.sh"
#   run_command "VERSION_TAG=${VERSION_TAG} \
#                REGISTRY_REPO=${REGISTRY_REPO} \
#                VERBOSE=${VERBOSE} \
#                \"${deploy_script}\" ${CUSTOM_PROPERTIES}" "Deploy Ingress controller yaml"
# }

- set_fact:
    ingress_controller_temp_key_file: "{{ mas_config_dir }}/{{ ingress_controller_base_name }}.keyfile.key.{{ arcgis_sitename }}.tmp"
    ingress_controller_temp_crt_file: "{{ mas_config_dir }}/{{ ingress_controller_base_name }}.certificate.crt.{{ arcgis_sitename }}.tmp"
    ingress_controller_temp_interpod_pfx_file: "{{ mas_config_dir }}/{{ ingress_controller_base_name }}.interpod.pfx.{{ arcgis_sitename }}.tmp"
    tls_config_temp_file: "{{ mas_config_dir }}/{{ ingress_controller_base_name }}.tls.conf.{{ arcgis_sitename }}.tmp"

- debug:
    msg:
      - "ingress_controller_temp_key_file ......................... {{ ingress_controller_temp_key_file }}"
      - "ingress_controller_temp_crt_file ......................... {{ ingress_controller_temp_crt_file }}"
      - "ingress_controller_temp_interpod_pfx_file ................ {{ ingress_controller_temp_interpod_pfx_file }}"


# Create Ingress Controller temp key and crt files
# ------------------------------------------------------------------------------------------------------------------------------
- name: "Create ingress controller key and crt temp files"
  shell: |
    mktemp {{ ingress_controller_temp_key_file }}
    mktemp {{ ingress_controller_temp_crt_file }}
    openssl req -x509 -newkey rsa:2048 -nodes -keyout "{{ ingress_controller_temp_key_file }}" -out "{{ ingress_controller_temp_crt_file }}" -sha256 -days 3650 -subj "/CN=*.{{ arcgis_namespace }}.{{ arcgis_k8s_cluster_dns_suffix }}"
  register: openssl_1st_cmd

- debug:
    var: openssl_1st_cmd.stdout_lines

# Create arcgis-interpod-cert-pem secret
# ------------------------------------------------------------------------------------------------------------------------------
- name: "Create '{{ arcgis_interpod_cert_pem_secret_name }}' secret with pem files"
  ignore_errors: true
  shell: |
    oc create secret tls {{ arcgis_interpod_cert_pem_secret_name }} \
      --cert={{ ingress_controller_temp_crt_file }} --key={{ ingress_controller_temp_key_file }} -n {{ arcgis_namespace }}
    oc label secret {{ arcgis_interpod_cert_pem_secret_name }} -n {{ arcgis_namespace }} arcgis/siteName={{ arcgis_sitename }}
    oc label secret {{ arcgis_interpod_cert_pem_secret_name }} -n {{ arcgis_namespace }} arcgis/tier=config
  register: openssl_2nd_cmd

- debug:
    var: openssl_2nd_cmd.stdout_lines

# Create arcgis-interpod-cert-pfx secret
# ------------------------------------------------------------------------------------------------------------------------------
- name: "Create ingress controller pfx temp file"
  shell: |
    mktemp {{ ingress_controller_temp_interpod_pfx_file }}
    openssl pkcs12 -export -out {{ ingress_controller_temp_interpod_pfx_file }} -inkey "{{ ingress_controller_temp_key_file }}" -in "{{ ingress_controller_temp_crt_file }}" -password pass:changeit
  register: openssl_3rd_cmd

- debug:
    var: openssl_3rd_cmd.stdout_lines

- name: "Create '{{ arcgis_interpod_cert_pfx_secret_name }}' secret with pfx file"
  ignore_errors: true
  shell: |
    oc create secret generic {{ arcgis_interpod_cert_pfx_secret_name }} \
      --from-file=default-pfx={{ ingress_controller_temp_interpod_pfx_file }} -n {{ arcgis_namespace }}
    oc label secret {{ arcgis_interpod_cert_pfx_secret_name }} -n {{ arcgis_namespace }} arcgis/siteName={{ arcgis_sitename }}
    oc label secret {{ arcgis_interpod_cert_pfx_secret_name }} -n {{ arcgis_namespace }} arcgis/tier=config
  register: openssl_4th_cmd

- debug:
    var: openssl_4th_cmd.stdout_lines

# Create arcgis-ingress-cert-pem secret
# ------------------------------------------------------------------------------------------------------------------------------
# Not sure if used at all so commenting for now... it has an issue to generate ibm cloud self-signed certs as ingress is too long
# - name: Generate tls config file
#   shell: |
#     cat << EOF > "{{ tls_config_temp_file }}"
#     [req]
#     distinguished_name = dn
#     x509_extensions = v3_req
#     prompt = no
#     [dn]
#     O = ArcGISEnterprise
#     CN = {{ argcis_ingress_server_tls_self_sign_cn }}
#     [v3_req]
#     keyUsage = digitalSignature, keyEncipherment, dataEncipherment
#     extendedKeyUsage = serverAuth
#     subjectAltName = @alt_names
#     [alt_names]
#     DNS.1 = {{ argcis_ingress_server_tls_self_sign_cn }}
#     EOF

# - name: "Create {{ tls_config_temp_file }} tls config file"
#   shell: |
#     openssl req -x509 -newkey rsa:2048 -nodes -keyout "{{ ingress_controller_temp_key_file }}" -out "{{ ingress_controller_temp_crt_file }}" -sha256 -config {{ tls_config_temp_file }} -nodes
#   register: openssl_5th_cmd

# - debug:
#     var: openssl_5th_cmd.stdout_lines

- name: "Create '{{ arcgis_default_ingress_server_tls_secret_name }}' default ingress tls secret"
  ignore_errors: true
  shell: |
    oc create secret tls {{ arcgis_default_ingress_server_tls_secret_name }} \
      --cert={{ ingress_controller_temp_crt_file }} --key={{ ingress_controller_temp_key_file }} -n {{ arcgis_namespace }}
    oc label secret {{ arcgis_default_ingress_server_tls_secret_name }} -n {{ arcgis_namespace }} arcgis/siteName={{ arcgis_sitename }}
  register: openssl_6th_cmd

- debug:
    var: openssl_6th_cmd.stdout_lines

- name: Lookup all required secrets
  shell: oc get secrets -n {{ arcgis_namespace }} | grep cert-p | awk '{ print $1}'
  register: arcgis_required_cert_secrets

- assert:
    that: item is in arcgis_required_cert_secrets.stdout_lines
    fail_msg: "Secret '{{ item }}' was not found in '{{ arcgis_namespace }}' namespace!"
  with_items:
    - "{{ arcgis_interpod_cert_pem_secret_name }}"
    - "{{ arcgis_interpod_cert_pfx_secret_name }}"
    - "{{ arcgis_default_ingress_server_tls_secret_name }}"
    
# Create arcgis-ingress-controller configmaps
# ------------------------------------------------------------------------------------------------------------------------------
# configmap/arcgis-ingress-controller-nginx-config created
# configmap/arcgis-ingress-controller-tcp-services created
# configmap/arcgis-ingress-controller-udp-services created

- name: Create arcgis-ingress-controller configmaps
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/ingress-controller/base-config.yml.j2'

# Create arcgis-ingress-controller RBACs
# ------------------------------------------------------------------------------------------------------------------------------
# lease.coordination.k8s.io/arcgis-ingress-controller-leader created
# serviceaccount/arcgis-ingress-serviceaccount created
# role.rbac.authorization.k8s.io/arcgis-ingress-role created
# rolebinding.rbac.authorization.k8s.io/arcgis-ingress-rolebinding created

- name: Create arcgis-ingress-controller rbacs
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/ingress-controller/rbac-config.yml.j2'

# TODO: We need to set cluster-admin permissions to these service accounts
# ideally we'd need to find a more restrictive permission policy
- name: Create additional cluster-admin role bindings for default service account
  kubernetes.core.k8s:
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: "cluster-admin-arcgis-default-binding"
        namespace: "{{ arcgis_namespace }}"
      subjects:
        - kind: ServiceAccount
          name: "default"
          namespace: "{{ arcgis_namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin

- name: Create additional cluster-admin role bindings
  kubernetes.core.k8s:
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: "cluster-admin-{{ additional_rb_item }}-binding"
        namespace: "{{ arcgis_namespace }}"
      subjects:
        - kind: ServiceAccount
          name: "{{ additional_rb_item }}-serviceaccount"
          namespace: "{{ arcgis_namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
  loop:
    - arcgis-admin
    - arcgis-elastic
    - arcgis-ingress
    - arcgis-prometheus
    - arcgis-queue
  loop_control:
    loop_var: additional_rb_item

# Create arcgis-ingress-controller deployment
# ------------------------------------------------------------------------------------------------------------------------------
- name: "Create '{{ arcgis_ingress_controller_deployment_name }}' deployment"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/ingress-controller/ingress-controller.yml.j2'

# Create arcgis-ingress-controller service
# ------------------------------------------------------------------------------------------------------------------------------
- name: "Create '{{ arcgis_ingress_controller_service_name }}' service"
  kubernetes.core.k8s:
    apply: yes
    template: 'templates/ingress-controller/ingress-controller-service.yml.j2'
