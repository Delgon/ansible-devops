# 6. Create cluster
# -----------------------------------------------------------------------------
- name: "rosa : Create ROSA cluster"
  when: rosa_cluster_lookup_result.rc == 1
  shell: >
    rosa create cluster \
      --cluster-name {{ cluster_name }} \
      --version {{ ocp_version }} \
      --replicas {{ rosa_compute_nodes }} \
      --compute-machine-type={{ rosa_compute_machine_type }} \
      --sts \
      --mode auto \
      --yes


# 7. Watch cluster provisioning progress
# -----------------------------------------------------------------------------
- name: "rosa : Wait until the ROSA cluster is deployed"
  shell: rosa describe cluster -c {{ cluster_name }} -o json
  register: rosa_cluster_completion
  until:
    - rosa_cluster_completion.rc == 0
    - (rosa_cluster_completion.stdout | from_json).state == 'ready'
  retries: 60
  delay: 60

- name: "rosa: Debug final cluster state"
  debug:
    msg: "{{ rosa_cluster_completion.stdout | from_json }}"


# 8. Set up cluster-admin user
# -----------------------------------------------------------------------------
- name: "rosa : Check for existing cluster-admin user"
  shell: rosa describe admin --cluster {{ cluster_name }}
  register: rosa_admin_check
  failed_when: "rosa_admin_check.rc > 1"

- name: "rosa : Debug cluster-admin lookup"
  debug:
    msg: "{{ rosa_admin_check }}"

- name: "rosa : Create cluster-admin user"
  when:
    - rosa_admin_check.stderr_lines | length > 0
    - rosa_admin_check.stderr_lines[0] == "WARN: There is no admin on cluster '" ~ cluster_name ~ "'. To create it run the following command:"
  shell: rosa create admin --cluster {{ cluster_name }} --password {{ rosa_cluster_admin_password }}
  register: rosa_admin_create

- name: "rosa : Debug cluster admin creation"
  when:
    - rosa_admin_check.stderr_lines | length > 0
    - rosa_admin_check.stderr_lines[0] == "WARN: There is no admin on cluster '" ~ cluster_name ~ "'. To create it run the following command:"
  debug:
    msg: "{{ rosa_admin_create.stdout_lines }}"

# We want to try to ensure the account is ready to use by the time the
# script completes, so we will delay for 5 minutes if the return code
# indicates that the account was created when we ran the previous command
- name: "rosa : Recheck for cluster-admin user"
  shell: rosa describe admin --cluster {{ cluster_name }}
  register: rosa_admin_recheck
  until:
    - rosa_admin_recheck.stdout_lines | length > 0
    - "There is an admin on cluster '" ~ cluster_name ~ "'" in rosa_admin_recheck.stout_lines[0]
  retries: 20 # approx 20 minutes before we give up
  delay: 60 # 1 minute
