# TODO: Need to find a way to make login work out off 'ocp_login' role or implement a solution that sets the target cluster into cpd-cli container's context https://github.ibm.com/PrivateCloud-analytics/CPD-Quality/issues/3269
# This works only for ROKS: ibmcloud oc cluster config -c $CLUSTER_NAME --admin --output yaml > /$HOME/cpd-cli-workspace/olm-utils-workspace/work/.olm-utils/.kubeconfig

# Login option 1: using 'ocp_server' and 'ocp_token' properties
- name: "cpd-cli: Run - Login to target {{ cluster_type }} cluster via login-to-ocp"
  when:
    - ocp_server is defined
    - ocp_server != ''
    - ocp_token is defined
    - ocp_token != ''
  shell: cpd-cli manage login-to-ocp --server={{ ocp_server }} --token={{ ocp_token }} 2>&1 | tee {{ role_path }}/logs/cpd_platform_login_output.log
  register: cpd_login_output
  failed_when: cpd_login_output.rc > 0 or ('login-to-ocp command ran successfully' not in cpd_login_output.stdout)

# Login option 2 (ROKS only): using 'ibmcloud oc cluster config' command to lookup kubeconfig for the target cluster and set the context in {{ cpd_work_dir }}/.olm-utils/.kubeconfig
- name: "cpd-cli: Run - Login to target {{ cluster_name }} cluster via kubeconfig "
  when:
    - ocp_server is not defined
    - ocp_password is not defined
    - cluster_type == 'roks'
    - cluster_name is defined
    - not cpd_login_output.changed
  shell: ibmcloud oc cluster config -c {{ cluster_name }} --admin --output yaml > {{ cpd_work_dir }}/.olm-utils/.kubeconfig 2>&1 | tee {{ role_path }}/logs/cpd_platform_login_output.log
  register: ibmcloud_login_output
  failed_when: ibmcloud_login_output.rc > 0

- debug:
    var: ibmcloud_login_output

- name: "Debug - Login to target cluster"
  debug:
    msg: "{{ cpd_login_output.stdout | default(ibmcloud_login_output, true) | default('logged to {{ cluster_type }} cluster') }}"
