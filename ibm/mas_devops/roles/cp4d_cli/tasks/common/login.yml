---
# if ocp_server and ocp_token are provided, use them to login to cpd-cli container
# otherwise, create a service account and login using its token
- when: (ocp_server is not defined or ocp_server == '') or (ocp_token is not defined or ocp_token == '')
  block:
      - name: "login : Lookup cpd-admin-sa-token secret name"
        shell: oc get secrets -n {{ cpd_instance_namespace }} | grep {{ cpd_admin_login_sa }}-token | awk '{print $1}'
        register: cpd_admin_token_secret_name
        
      - when: cpd_admin_token_secret_name.stdout | length == 0
        block:
          - name: "login : Create cpd-admin-sa serviceAccount"
            kubernetes.core.k8s:
              apply: yes
              template: templates/cpd_platform/cpd-admin-sa-rbac.yml.j2
            register: cpd_sa_create
            retries: 2
            delay: 15 # seconds
            until: cpd_admin_sa_create.error is not defined # The error field will be set to 409 if there was a conflict

      - name: "login : Lookup {{ cpd_admin_login_sa }}-token secret name"
        shell: oc get secrets -n {{ cpd_instance_namespace }}  | grep {{ cpd_admin_login_sa }}-token | awk '{print $1}'
        register: cpd_admin_token_secret_name
        failed_when: cpd_admin_token_secret_name.stdout | length == 0

      - name: "login : Lookup {{ cpd_admin_login_sa }}-token secret content"
        kubernetes.core.k8s_info:
          api_version: v1
          kind: Secret
          name: "{{ cpd_admin_token_secret_name.stdout }}"
          namespace: "{{ cpd_instance_namespace }}"
        register: cpd_admin_secret_output

      - name: "login : Set ocp_token property from {{ cpd_admin_login_sa }}-token secret content"
        set_fact:
          ocp_token: "{{ cpd_admin_secret_output.resources[0].data.token | b64decode }}"

      - name: "login : Lookup logged ocp server"
        shell: oc whoami --show-server
        register: cpd_admin_server_output
        failed_when: cpd_admin_server_output.stdout | length == 0

      - name: "login : Set ocp_server property"
        set_fact:
          ocp_server: "{{ cpd_admin_server_output.stdout  }}"

- name: "login : Assert ocp login and token are provided"
  assert:
    that:
      - ocp_server is defined
      - ocp_server != ''
      - ocp_token is defined
      - ocp_token != ''
    fail_msg: "'ocp_server' and/or 'ocp_token' are not provided, thus it will not be possible to proceed."

# Login using 'ocp_server' and 'ocp_token' properties
- name: "login: Login to target cluster within cpd-cli container via login-to-ocp"
  shell: cpd-cli manage login-to-ocp --server={{ ocp_server }} --token={{ ocp_token }} 2>&1 | tee {{ cpd_logs_dir }}/cpd_platform_login_output.log
  register: cpd_login_output
  failed_when: ('login-to-ocp command ran successfully' not in cpd_login_output.stdout)

- name: "login : Debug"
  debug:
    msg: "{{ cpd_login_output.stdout }}"
