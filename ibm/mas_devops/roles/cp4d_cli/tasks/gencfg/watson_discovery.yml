---
# 1. Watson Discovefy Instance Installation Summary"
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery : Watson Discovery Installation Summary"
  debug:
    msg:
      - "CP4D Dashboard ......................... {{ cpd_admin_url }}"
      - "CP4D Admin Username .................... {{ cpd_admin_username }}"
      - "CP4D Admin Password .................... {{ cpd_admin_password_text }}"
      - "Discovery Instance name ................ {{ cpd_wd_instance_name }}"
      - "MAS config directory ................... {{ mas_config_dir }}"

# 2. Get CP4D Beaker token to enable Watson API authentication
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery : Authorize the CP4D (get Bearer token)"
  include_tasks: "tasks/gencfg/get-bearer-token.yml"

# 3. Check if there is already a discovery service instance previously created
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery : Get all discovery service instances (query_instance_output)"
  when: cpd_bearer_token is defined
  uri:
    url: "{{ cpd_admin_url }}/zen-data/v3/service_instances?fetch_all_instances=false&limit=9223372036854775807&offset=0"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ cpd_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,412
    timeout: 30
  register: query_instance_output

- name: "gencfg/watson_discovery : Debug query_instance_output"
  debug:
    msg: "{{ query_instance_output }}"

- name: "gencfg/watson_discovery : Obtain Service Instance Id (wd_instance_id) if a discovery service is found with name {{ cpd_wd_instance_name }}"
  set_fact:
    wd_instance_id: "{{ item.id }}"
  with_items: "{{ query_instance_output.json.service_instances }}"
  when:
    - query_instance_output.status is defined and query_instance_output.status | int == 200
    - query_instance_output.json.service_instances | length > 0
    - item.addon_type == "discovery"
    - item.display_name == cpd_wd_instance_name

- name: "gencfg/watson_discovery : Debug wd_instance_id"
  debug:
    msg:
      - "Discovery Instance Id: ............. {{ 'Not Found' if wd_instance_id is not defined else wd_instance_id }}"

# 4. Create a Discovery Service instance if none is found
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery : Create a Discovery Service instance if none is found"
  when: wd_instance_id is not defined or wd_instance_id == ""
  uri:
    url: "{{ cpd_admin_url }}/watson/common/discovery/api/ibmcloud/resource-controller/resource_instances"
    validate_certs: no
    method: POST
    headers:
      Authorization: "Bearer {{ cpd_bearer_token }}"
      cache-control: "no-cache"
    body_format: "json"
    body: "{{ lookup('template','templates/wd/wds.json.j2') }}"
    status_code: 200,412
    timeout: 30
  register: create_wd_output

- name: "gencfg/watson_discovery : Define Discovery Instance Id (wd_instance_id) based on just created service (if not previously defined)"
  when: wd_instance_id is not defined or wd_instance_id == ""
  set_fact:
    # Conversion is needed as Discovery uses this id format in the Access URL api exposed in CP4D UI
    wd_instance_id: "{{ create_wd_output.json.id | replace('-', '') | int }}"

- name: "gencfg/watson_discovery : Debug wd_instance_id"
  debug:
    msg:
      - "Discovery Instance Id: ............. {{ wd_instance_id }}"
  when: wd_instance_id is not defined or wd_instance_id == ""

# 5. Define Watson Discovery API URL
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery : Define Watson Discovery API URL"
  when: wd_instance_id is defined and wd_instance_id != ""
  set_fact:
    wd_url: "{{ cpd_admin_url }}/discovery/{{ cpd_instance_namespace }}-wd/instances/{{ wd_instance_id }}/api"

# 6. Write out the config to the local filesystem
# -----------------------------------------------------------------------------
- name: "gencfg/watson_discovery: Debug Watson Discovery configuration parameters for Assist binding"
  debug:
    msg:
      - "MAS Instance Id ......................... {{ mas_instance_id }}"
      - "WD Api Url .............................. {{ wd_url }}"
      - "CPD Admin Username ...................... {{ cpd_admin_username }}"

- name: "gencfg/watson_discovery : Write out the config to the local filesystem"
  no_log: true
  when:
    - mas_instance_id is defined and mas_instance_id != ""
    - mas_config_dir is defined and mas_config_dir != ""
    - wd_url is defined and wd_url != ""
  ansible.builtin.template:
    src: cpd_services/watson_discovery/wdscfg.yml.j2
    dest: "{{ mas_config_dir }}/{{ mas_instance_id }}-wd-config.yml" # WD does not use a WD CR to bind the service
    mode: "664"
