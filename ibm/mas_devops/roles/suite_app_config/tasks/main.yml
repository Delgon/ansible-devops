---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if required properties are not provided"
  assert:
    that:
      - mas_instance_id is defined and mas_instance_id != ""
      - mas_app_id is defined and mas_app_id != ""
      - mas_workspace_id is defined and mas_workspace_id != ""
    fail_msg: "Missing one or more required properties"


# 2. Load var files
# -----------------------------------------------------------------------------
- name: Load mas_appws variables
  include_vars: "vars/{{ mas_app_id }}.yml"

- name: Load mas_app variables
  include_vars: "{{ role_path }}/../suite_app_install/vars/{{ mas_app_id }}.yml"

# 2.2 Load PodTemplates configuration
# -----------------------------------------------------------------------------
- name: Load podTemplates configuration
  vars:
    config_file_name: "ibm-mas-{{ mas_app_id }}-ws.yml"
  when:
    - mas_pod_templates_dir is defined
    - mas_pod_templates_dir != ''
  block:
    - name: Check whether configuration exists
      ansible.builtin.stat:
        path: "{{ mas_pod_templates_dir }}/{{ config_file_name }}"
      register: pod_templates_file_lookup

    - name: Load podTemplates configuration
      ansible.builtin.include_vars:
        file: "{{ mas_pod_templates_dir }}/{{ config_file_name }}"
        name: "ibm_mas_{{ mas_app_id }}_ws"
      when: pod_templates_file_lookup.stat.exists

    - name: Failed to find configuration
      ansible.builtin.debug:
        msg: "Could not find '{{ mas_pod_templates_dir }}/{{ config_file_name }}' - Skipping"
      when: not pod_templates_file_lookup.stat.exists

# 2.3 Load default application spec, if none is provided by user
- name: Load default application spec
  when: mas_app_spec is not defined or mas_app_spec == ""
  include_vars: "vars/defaultspecs/{{ mas_app_id }}.yml"


# 3. Run Application Specific Pre-configuration
# -----------------------------------------------------------------------------
# The following will auto determine storage classes to be used as persistent
# volumes for Manage attachments/BIM configurations (Manage OOTB features)
- name: Determine Storage Class for {{ mas_app_id }} application
  when:
    - mas_app_id in ['manage','health']
    - mas_app_settings_persistent_volumes_flag or mas_app_settings_server_bundles_size in ['jms','snojms']
  include_tasks: "tasks/determine-storage-classes.yml"

# Build the incredibly complex Manage spec.settings from a set of env vars
- name: "Run Manage specific pre-configuration"
  when: mas_app_id == 'manage'
  include_tasks: "tasks/manage/main.yml"

# Resolve the WSL project ID that will be used by Predict and HP Utilities
- name: Lookup Watson Studio Project ID
  when: mas_app_id is in ['hputilities', 'predict']
  include_tasks: "tasks/determine-watson-studio-id.yml"


# 4. Load default application workspace spec, if user does not provide one
# -----------------------------------------------------------------------------
- name: Load default application workspace spec
  when: mas_appws_spec is not defined or mas_appws_spec == ""
  include_vars: "vars/defaultspecs/{{ mas_app_id }}.yml"


# 5. Provide debug information
# -----------------------------------------------------------------------------
- name: "Configure namespace"
  set_fact:
    mas_namespace: "mas-{{ mas_instance_id }}-core"
    mas_app_namespace: "mas-{{ mas_instance_id }}-{{ mas_app_id }}"

- name: "Debug information"
  debug:
    msg:
      - "Instance ID ............................ {{ mas_instance_id }}"
      - "Application ID ......................... {{ mas_app_id }}"
      - "Workspace ID ........................... {{ mas_workspace_id }}"
      - "Application namespace .................. {{ mas_app_namespace }}"
      - "JDBC Binding ........................... {{ mas_appws_bindings_jdbc | default('<undefined>', true) }}"
      - "Templated workspace CR ................. {{ lookup('template', 'templates/workspace.yml.j2') }}"


# 6. Workspace configuration
# -----------------------------------------------------------------------------
- name: Configure application in workspace
  kubernetes.core.k8s:
    state: present
    namespace: "{{ mas_app_namespace }}"
    definition: "{{ lookup('template', 'templates/workspace.yml.j2') }}"


# 7. Check if the application is ready
# -----------------------------------------------------------------------------
# Workspaces can only be configured when an application is in Ready state.
#
# If the application is not in ready state we can fail fast rather than waiting
# for the workspace to be Ready -- because it never will!
- name: "Lookup application information"
  kubernetes.core.k8s_info:
    api_version: "{{ mas_app_api_version }}"
    name: "{{ mas_instance_id }}"
    namespace: "{{ mas_app_namespace }}"
    kind: "{{ mas_app_kind }}"
  register: app_cr_result

- name: "Check that the application is ready to configure a workspace"
  assert:
    that:
      - app_cr_result.resources is defined
      - app_cr_result.resources | length > 0
      - app_cr_result.resources | json_query('[*].status.conditions[?type==`Ready`][].status') | select ('match','True') | list | length == 1
    fail_msg: "Workspace {{ mas_workspace_id }} created but application {{ mas_app_id }} is not ready"


# 8. Wait for application workspace to be ready
# -----------------------------------------------------------------------------
- ansible.builtin.include_role:
    name: suite_app_verify
