---
# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Namespace .................... {{ cpd_meta_namespace }}"
      - "Storage class ................ {{ cpd_storage_class }}"
      - "Db2 database name ............ {{ db2wh_dbname }}"
      - "Db2 version .................. {{ db2wh_version }}"


# 2. Install CP4D services for db2
# -----------------------------------------------------------------------------
- name: "Install Db2 warehouse CPDService"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpdservice.yml') }}"

- name: "Wait for Db2 warehouse CPDService to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: metaoperator.cpd.ibm.com/v1
    kind: CPDService
    name: cpdservice-db2wh
    namespace: "{{ cpd_meta_namespace }}"
  register: _cpd_service
  until:
    - _cpd_service.resources | length > 0
    - _cpd_service.resources[0].status is defined
    - _cpd_service.resources[0].status.code == '0'
    - _cpd_service.resources[0].status.status == 'Ready'
    - _cpd_service.resources[0].status.message == 'Completed'
  retries: 60 # approx 1 hour before we give up
  delay: 60 # 1 minute


# 3. Create a Db2 instance
# -----------------------------------------------------------------------------
- name: "Create db2wh Instance"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2ucluster.yaml') }}"
  register: _db2_cluster_result

- name: "Install Db2 warehouse Console"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/dmc.yml') }}"

- name: "Wait for Db2 Management Console CPDService to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: metaoperator.cpd.ibm.com/v1
    kind: CPDService
    name: cpdservice-db2wh-dmc
    namespace: "{{ cpd_meta_namespace }}"
  register: _cpd_service_dmc
  until:
    - _cpd_service_dmc.resources | length > 0
    - _cpd_service_dmc.resources[0].status is defined
    - _cpd_service_dmc.resources[0].status.code == '0'
    - _cpd_service_dmc.resources[0].status.status == 'Ready'
    - _cpd_service_dmc.resources[0].status.message == 'Completed'
  retries: 60 # approx 1 hour before we give up
  delay: 60 # 1 minute

- name: "Get cluster subdomain"
  community.kubernetes.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: Lookup db2wh TLS certificates
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "internal-tls"
    namespace: "{{cpd_meta_namespace}}"
  register: _db2u_instance_certificates

- name: Lookup db2wh Engn Service
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Service
    name: "c-db2u-{{db2wh_dbname | lower}}-db2u-engn-svc"
    namespace: "{{cpd_meta_namespace}}"
  register: _db2u_instance_engn_svc

- name: Set Db2wh certificates as Facts
  set_fact:
    db2wh_tls_crt: "{{ _db2u_instance_certificates.resources[0].data['tls.crt'] | b64decode }}"
    db2wh_tls_key: "{{ _db2u_instance_certificates.resources[0].data['tls.key'] | b64decode }}"
  when:
    - _db2u_instance_certificates is defined
    - (_db2u_instance_certificates.resources | length > 0)


- name: Set Db2wh TLS nodePort
  set_fact:
    db2wh_tls_nodeport: "{{item.nodePort}}"
  when: "{{item.name == 'ssl-server'}}"
  loop:
    "{{_db2u_instance_engn_svc.resources[0].spec.ports}}"

- name: "Create Db2 Warehouse route"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/tlsroute.yml') }}"

- include_tasks: tasks/suite_jdbccfg.yml
  when:
    - mas_instance_id is defined
    - db2wh_cfg_file is defined
